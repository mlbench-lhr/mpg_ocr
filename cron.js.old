const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc");
const isBetween = require("dayjs/plugin/isBetween");
const cron = require("node-cron");
const fetch = require("node-fetch");
console.log("âœ… Cron job script started...");

dayjs.extend(utc);
dayjs.extend(isBetween);

cron.schedule("*/1 * * * *", async () => {
  try {
    const dbResponse = await fetch("http://localhost:3000/api/auth/public-db");
    const dbData = await dbResponse.json();

    console.log("dbData?.database -> ", dbData);
    if (dbData?.database !== "remote") {
      console.log("Database is not remote. Skipping job execution.");
      return;
    }

    const activeJobs = await fetch("http://localhost:3000/api/jobs/get-job");
    const jobs = await activeJobs.json();
    const currentTime = dayjs().add(5, "hours");

    const res = await fetch("http://localhost:3000/api/ipAddress/ip-address");
    const data_2 = await res.json();

    const res1 = await fetch("http://localhost:3000/api/save-wms-url");
    const data_0 = await res1.json();
    console.log('wms url-> ', data_0)

    let ocrUrl, baseUrl, wmsUrl, userName, passWord;

    if (data_2.ip) {
      ocrUrl = `http://${data_2.ip}:8080/run-ocr`;
      baseUrl = `http://${data_2.secondaryIp}:3000`;
      wmsUrl = data_0.wmsUrl;
      userName = data_0.username;
      passWord = data_0.password;
    }

    console.log('username-> ', userName)

    if (jobs && Array.isArray(jobs.activeJobs)) {
      for (const job of jobs.activeJobs) {
        const selectedDays = job.selectedDays;
        const currentDay = currentTime.format("dddd");
        if (selectedDays.includes(currentDay)) {
          const { fromTime, toTime } = job.pdfCriteria;
          const from = dayjs(fromTime).utc();
          const to = dayjs(toTime).utc();
          if (currentTime.isBetween(from, to)) {
            const [hours, minutes] = job.everyTime.split(":").map(Number);
            const intervalMinutes = hours * 60 + minutes;
            const minuteDifference = currentTime.diff(from, "minute");
            if (minuteDifference % intervalMinutes === 0) {
              const response = await fetch(
                "http://localhost:3000/api/pod/retrieve"
              );
              const data_1 = await response.json();
              if (data_1.length > 0 && data_1[0]) {
                console.log("data_1 full:", JSON.stringify(data_1, null, 2));
                console.log("keys of first object:", Object.keys(data_1[0]));
              } else {
                console.log("data_1 is empty or invalid:", data_1);
                return; // or skip the rest of the logic for this iteration
              }

              const fileId = data_1[0]?.FILE_ID || data_1[0]?.file_id || "";
              const fileTable =
                data_1[0]?.FILE_TABLE || data_1[0]?.file_table || "";

              console.log("Using fileId:", fileId, "fileTable:", fileTable);

              // console.log("My name is NUMAN 1122", data_1[0]?.fileId);
              // console.log("My name is NUMAN 1133", data_1[0]?.fileTable);

              // const file_response = await fetch(`http://localhost:3000/api/pod/file?fileId=${data_1.fileId}&fileTable=${data_1.fileTable}`);
              // const file_response = await fetch(`http://localhost:3000/api/pod/file?fileId=${data_1[0]?.FILE_ID}&fileTable=${data_1[0]?.FILE_TABLE}`);
              const file_response = await fetch(
                `http://localhost:3000/api/pod/file?fileId=${fileId}&fileTable=${fileTable}`
              );
              // const file_response = await fetch(`http://localhost:3000/api/pod/file?fileId=POD_002&fileTable=XTI_2025_T`);

              const data_3 = await file_response.json();

              if (file_response.ok) {
                const insertRes = await fetch(
                  "http://localhost:3000/api/pod/store",
                  {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ fileId: data_3.FILE_ID }),
                  }
                );

                const insertData = await insertRes.json();
                const fileData = {
                  jobId: "",
                  fileId: data_3.FILE_ID,
                  pdfUrl: data_3.FILE_PATH,
                  deliveryDate: "",
                  noOfPages: 0,
                  blNumber: "",
                  podDate: "",
                  podSignature: "",
                  totalQty: "",
                  received: "",
                  damaged: "",
                  short: "",
                  over: "",
                  refused: "",
                  customerOrderNum: "",
                  stampExists: "",
                  finalStatus: "new",
                  reviewStatus: "unConfirmed",
                  recognitionStatus: "new",
                  breakdownReason: "none",
                  reviewedBy: "",
                  cargoDescription: "",
                  sealIntact: "",
                };

                fetch("http://localhost:3000/api/process-data/save-data", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify([fileData]),
                })
                  .then((response) => response.json())
                  .then((result) => console.log("Response:", result))
                  .catch((error) => console.error("Error:", error));

                let filePath = `${baseUrl}/api/access-file?filename=${encodeURIComponent(
                  data_3.FILE_NAME
                )}`;

                const ocrResponse = await fetch(ocrUrl, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ file_url_or_path: filePath }),
                });

                if (!ocrResponse.ok) {
                  const errorData = await ocrResponse.json().catch(() => null);
                  throw new Error(errorData?.error || "Failed to process OCR");
                }

                const ocrData = await ocrResponse.json();

                if (ocrData && Array.isArray(ocrData)) {
                  const processedDataArray = ocrData.map((data) => {
                    const recognitionStatusMap = {
                      failed: "failure",
                      "partially valid": "partiallyValid",
                      valid: "valid",
                      null: "null",
                    };

                    const status = recognitionStatusMap[data?.Status] || "null";
                    const recognitionStatus =
                      recognitionStatusMap[status] || "null";

                    const urlObj = new URL(filePath);
                    const filename = urlObj.searchParams.get("filename") || "";
                    const decodedFilePath = `/file/${decodeURIComponent(
                      filename
                    )}`;

                    return {
                      jobId: job._id ? job._id.toString() : null,
                      pdfUrl: decodedFilePath,
                      deliveryDate: new Date().toISOString().split("T")[0],
                      noOfPages: 1,
                      blNumber: data?.B_L_Number ? String(data.B_L_Number) : "",
                      podDate: data?.POD_Date || "",
                      podSignature:
                        data?.Signature_Exists === "yes"
                          ? "yes"
                          : data?.Signature_Exists === "no"
                          ? "no"
                          : data?.Signature_Exists,
                      totalQty: isNaN(data?.Issued_Qty)
                        ? data?.Issued_Qty
                        : Number(data?.Issued_Qty),
                      received: isNaN(data?.Received_Qty)
                        ? data?.Received_Qty
                        : Number(data?.Received_Qty),

                      damaged: data?.Damage_Qty,
                      short: data?.Short_Qty,
                      over: data?.Over_Qty,
                      refused: data?.Refused_Qty,

                      customerOrderNum: data?.Customer_Order_Num,
                      stampExists:
                        data?.Stamp_Exists === "yes"
                          ? "yes"
                          : data?.Stamp_Exists === "no"
                          ? "no"
                          : data?.Stamp_Exists,
                      finalStatus: "valid",
                      reviewStatus: "unConfirmed",
                      recognitionStatus: recognitionStatus,
                      breakdownReason: "none",
                      reviewedBy: "OCR Engine",
                      cargoDescription: "Processed from OCR API.",
                      none: "N",
                      sealIntact:
                        data?.Seal_Intact === "yes"
                          ? "Y"
                          : data?.Seal_Intact === "no"
                          ? "N"
                          : data?.Seal_Intact,
                    };
                  });

                  const processedDataObject =
                    processedDataArray.length > 0 ? processedDataArray[0] : {};

                  // console.log('numan obj', String(processedDataObject.blNumber));
                  // console.log('numan array', processedDataArray);
                  // console.log('numan array', processedDataArray[0]['recognitionStatus']);

                  const fetchSAPOData = async () => {
                    const sapUrl = wmsUrl;
                    const username = userName;
                    const password = passWord;
                    const basicAuth = Buffer.from(
                      `${username}:${password}`
                    ).toString("base64");
                    const BOLNo = [String(processedDataObject.blNumber)];
                    try {
                      const response = await fetch(sapUrl, {
                        method: "POST",
                        headers: {
                          Authorization: `Basic ${basicAuth}`,
                          Accept: "application/json",
                          "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                          BOLNo: BOLNo,
                        }),
                      });

                      if (!response.ok) {
                        throw new Error(`SAP API returned ${response.status}`);
                      }

                      const data = await response.json();
                      if (
                        String(processedDataObject.blNumber).trim() ===
                        data[0].BOLNo.trim()
                      ) {
                        console.log("Matched!");
                        processedDataObject.recognitionStatus = "valid";
                        processedDataArray[0].recognitionStatus = "valid";
                      } else {
                        console.log("Not matched!");
                        processedDataObject.recognitionStatus = "failure";
                        processedDataArray[0].recognitionStatus = "failure";
                      }
                    } catch (error) {
                      console.error("Error 12346:", error);
                    }
                  };

                  fetchSAPOData();

                  const check_res = await fetch(
                    "http://localhost:3000/api/settings/auto-confirmation"
                  );
                  const data_4 = await check_res.json();
                  const check = data_4.isAutoConfirmationOpen;

                  if (check) {
                    const fileId = data_3.FILE_ID;
                    fetch("http://localhost:3000/api/pod/update", {
                      method: "PUT",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify({
                        fileId,
                        ocrData: processedDataObject,
                      }),
                    })
                      .then((res) => res.json())
                      .then((data) => console.log("Update Response:", data))
                      .catch((error) => console.error("Update Error:", error));
                  }

                  const saveResponse = await fetch(
                    "http://localhost:3000/api/process-data/save-data",
                    {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify(processedDataArray),
                    }
                  );

                  if (!saveResponse.ok) {
                    console.error(
                      "Error saving data:",
                      await saveResponse.json()
                    );
                  } else {
                    // console.log("OCR data saved successfully.");
                  }
                }
              }
            }
          }
        }
      }
    }

  } catch (error) {
    console.error("Cron Job Error:", error);
  }
});
